<%= form_for(@print) do |f| %>
  <% if @print.new_record? %>
    <%= content_for :js_extra do -%>
      <%= raw "var print_job='#{generate_template(f, :print_jobs,
        :locals => {:disabled => false})}';" %>
      <%= raw "var article_line='#{generate_template(f, :article_lines,
        :locals => {:disabled => false})}';" %>
    <% end -%>
  <% end %>
  <%= show_error_messages(@print) %>

  <table class="field_container">
    <tbody>
      <tr>
        <td class="label"><%= f.label :printer %></td>
        <td><%= print_destinations_field(f) %></td>
        <td class="label"><%= f.label :customer, :for => :print_auto_customer_name %></td>
        <td>
          <% field_classes = [:autocomplete_field] %>
          <% field_classes << :field_with_errors unless @print.errors[:customer_id].blank? %>
          <%= f.text_field :auto_customer_name, :value => @print.customer,
            :class => field_classes.join(' '),
            :'data-autocomplete-url' => autocomplete_for_customer_name_prints_path %>
          <% if @print.customer %>
            <%= link_to_function 'X',
              "$('print_auto_customer_name').setValue(''); $('print_customer_id').setValue(''); this.remove()",
              :class => :remove %>
          <% end %>
          <div class="autocomplete_container">
            <div class="autocomplete" style="display: none;"></div>
          </div>
          <%= f.hidden_field :customer_id, :class => :autocomplete_id %>
          <%= hidden_field_tag :customer_free_credit,
            @print.customer.try(:free_credit), :id => :customer_free_credit %>
        </td>
      </tr>
      <tr>
        <td class="label"><%= f.label :scheduled_at %></td>
        <td><%= f.calendar_date_select :scheduled_at, :time => true %></td>
        <td class="label"><%= f.label :avoid_printing %></td>
        <td><%= f.check_box :avoid_printing %></td>
      </tr>
    </tbody>
  </table>

  <section class="nested_items">
    <table class="header">
      <tbody>
        <tr>
          <td class="title"><h2><%= t :print_jobs, :scope => [:view, :prints] %></h2></td>
          <td class="place_holder">&nbsp;</td>
        </tr>
      </tbody>
    </table>
    
    <div id="print_jobs_headers" class="headers">
      <h3><%= PrintJob.human_attribute_name :document_id %></h3>
      <h3><%= PrintJob.human_attribute_name :copies %></h3>
      <h3><%= PrintJob.human_attribute_name :pages %></h3>
      <h3><%= PrintJob.human_attribute_name :price_per_copy %></h3>
      <h3><%= PrintJob.human_attribute_name :range %></h3>
      <h3><%= PrintJob.human_attribute_name :two_sided %></h3>
      <br class="break" />
    </div>
    
    <div id="print_jobs" class="items">
      <%= f.fields_for :print_jobs do |pj_f| %>
        <%= render :partial => 'print_job', :locals => {
          :f => pj_f, :is_dynamic => false, :disabled => !@print.new_record?
        } %>
      <% end %>
    </div>
  </section>

  <div class="add_nested_item">
    <%= link_to_if @print.new_record?, t(:'view.prints.add_print_job'), '#',
      :'data-template' => :print_job, :'data-container' => :print_jobs,
      :'data-event' => :add_nested_item, :id => :add_print_job_link,
      :title => t(:'view.prints.add_print_job_title'),
      :class => 'button white' %>
  </div>

  <section class="nested_items">
    <table class="header">
      <tbody>
        <tr>
          <td class="title"><h2><%= t :article_lines, :scope => [:view, :prints] %></h2></td>
          <td class="place_holder">&nbsp;</td>
        </tr>
      </tbody>
    </table>

    <div id="article_lines_headers" class="headers">
      <h3><%= ArticleLine.human_attribute_name :article_id %></h3>
      <h3><%= ArticleLine.human_attribute_name :units %></h3>
      <h3><%= ArticleLine.human_attribute_name :unit_price %></h3>
      <br class="break" />
    </div>

    <div id="article_lines" class="items">
      <% @print.article_lines.build if @print.article_lines.empty? %>
      <%= f.fields_for :article_lines do |pj_f| %>
        <%= render :partial => 'article_line', :locals => {
          :f => pj_f, :is_dynamic => false, :disabled => !@print.new_record?
        } %>
      <% end %>
    </div>
  </section>

  <div class="add_nested_item">
    <%= link_to_if @print.new_record?, t(:'view.prints.add_article_line'), '#',
      :'data-template' => :article_line, :'data-container' => :article_lines,
      :'data-event' => :add_nested_item, :id => :add_article_line_link,
      :title => t(:'view.prints.add_article_line_title'),
      :class => 'button white' %>
  </div>

  <section class="nested_items">
    <table class="header">
      <tbody>
        <tr>
          <td class="title"><h2><%= t :payment, :scope => [:view, :prints] %></h2></td>
          <td class="place_holder">&nbsp;</td>
        </tr>
      </tbody>
    </table>
    <table class="summary">
      <thead>
        <tr>
          <th><%= Payment.human_attribute_name :amount %></th>
          <th><%= Payment.human_attribute_name :paid %></th>
          <th><%= Payment.human_attribute_name :paid_with %></th>
        </tr>
      </thead>
      <tbody>
        <%= f.fields_for :payments do |p_f| %>
          <tr>
            <td>
              <%= p_f.text_field :amount, :value => '%.3f' % p_f.object.amount,
                :id => "payment_#{p_f.object.paid_with}_amount", :maxlength => 15,
                :readonly => true %>
            </td>
            <td>
              <%= p_f.text_field :paid, :value => '%.3f' % p_f.object.paid,
                :id => "payment_#{p_f.object.paid_with}_paid", :maxlength => 15,
                :readonly => p_f.object.bonus? %>
            </td>
            <td>
              <%= p_f.object.paid_with_text %>
              <%= p_f.hidden_field :paid_with %>
              <%= p_f.hidden_field :lock_version %>
            </td>
          </tr>
        <% end %>
      </tbody>
    </table>
  </section>

  <div class="actions">
    <%= f.hidden_field :lock_version %>
    <%= f.submit nil, :id => :print_submit, :class => 'button white',
      :title => t(:'view.prints.print_title') %>
  </div>
<% end %>
<script type="text/javascript">
  function updateTotalPrice() {
    var cashPrefix = 'payment_<%= Payment::PAID_WITH[:cash] %>';
    var bonusPrefix = 'payment_<%= Payment::PAID_WITH[:bonus] %>';
    var freeCredit = parseFloat($('customer_free_credit').getValue()) || 0.0;
    var payWithCash = 0.0, payWithBonus = 0.0;
    var totalPrice = $$('.print_job').inject(0.0, function(total, pj) {
      var pjPrice = (pj.retrieve('exclude_from_total') ?
        0 : (parseFloat(pj.readAttribute('data-price')) || 0));

      return total + pjPrice;
    });

    totalPrice += $$('.article_line').inject(0.0, function(total, pj) {
      var pjPrice = (pj.retrieve('exclude_from_total') ?
        0 : (parseFloat(pj.readAttribute('data-price')) || 0));

      return total + pjPrice;
    });
    
    if(freeCredit > totalPrice) {
      payWithCash = 0.0;
      payWithBonus = totalPrice;
    } else {
      payWithCash = totalPrice - freeCredit;
      payWithBonus = freeCredit;
    }

    $(cashPrefix + '_amount').setValue(payWithCash.toFixed(3));
    $(cashPrefix + '_paid').setValue(payWithCash.toFixed(3));
    $(bonusPrefix + '_amount').setValue(payWithBonus.toFixed(3));
    $(bonusPrefix + '_paid').setValue(payWithBonus.toFixed(3));
  }

  function updatePrintJobPrice(printJob) {
    var copies = parseInt(printJob.down('input[name$="[copies]"]').getValue());
    var pricePerCopy = parseFloat(
      printJob.down('input[name$="[price_per_copy]"]').getValue()
    );
    var rangePages = parseInt(
      printJob.down('input[name$="[range]"]').readAttribute('data-range-pages')
    );
    var jobPrice = copies * pricePerCopy * rangePages;
    var money = printJob.down('span.money');

    printJob.writeAttribute('data-price', jobPrice);
    money.update(money.innerHTML.sub(/(\d+.)+\d+/, jobPrice.toFixed(3)));

    updateTotalPrice();
  }

  function updateArticleLinePrice(articleLine) {
    var units = parseInt(articleLine.down('input[name$="[units]"]').getValue());
    var unitPrice = parseFloat(
      articleLine.down('input[name$="[unit_price]"]').getValue()
    );
    var articlePrice = units * unitPrice;
    var money = articleLine.down('span.money');

    articleLine.writeAttribute('data-price', articlePrice);
    money.update(money.innerHTML.sub(/(\d+.)+\d+/, articlePrice.toFixed(3)));

    updateTotalPrice();
  }

  document.on('item:removed', '.print_job', function(event, element) {
    element.store('exclude_from_total', true);
    
    updateTotalPrice();
  });

  document.on('item:removed', '.article_line', function(event, element) {
    element.store('exclude_from_total', true);

    updateTotalPrice();
  });

  document.on('autocomplete:update', 'form', function(event) {
    var element = $(event.memo);
    
    if (element.readAttribute('data-pages')) {
      var pages = element.readAttribute('data-pages');
      var printJob = element.up('.print_job');

      printJob.down('input[name$="[pages]"]').setValue(pages).disable();
      printJob.down('a.details_link').writeAttribute('href',
        element.readAttribute('data-url'));
      printJob.down('a.details_link').show();
      printJob.down('.dynamic_details').update('');
      printJob.down('input[name$="[range]"]').setValue('').writeAttribute(
        'data-range-pages', pages);

      updatePrintJobPrice(printJob);
    } else if (element.readAttribute('data-unit-price')) {
      var unitPrice = element.readAttribute('data-unit-price');
      var articleLine = element.up('.article_line');

      articleLine.down('input[name$="[unit_price]"]').setValue(unitPrice);

      updateArticleLinePrice(articleLine);
    } else if (element.readAttribute('data-free-credit')) {
      $('customer_free_credit').setValue(
        element.readAttribute('data-free-credit')
      );

      updateTotalPrice();
    }
  });

  document.on('keyup', 'input[name$="[range]"]', function(event, element) {
    var validRanges = true, maxPage = undefined, rangePages = 0;
    var pages = parseInt(
      element.up('.print_job').down('input[name$="[pages]"]').getValue()
    );
    var ranges = element.getValue().trim().split(/\s*,\s*/).sortBy(function(r) {
      return parseInt(r.match(/^\d+/)) || 0;
    });

    ranges.each(function(r) {
      var data = r.match(/^(\d+)(-(\d+))?$/);
      var n1 = Try.these(function() { return parseInt(data[1]); });
      var n2 = Try.these(function() { return parseInt(data[3]); });
      
      validRanges = validRanges && n1 && n1 > 0 && (!n2 || n1 < n2);
      validRanges = validRanges && (!maxPage || maxPage < n1);

      maxPage = n2 || n1;
      rangePages += n2 ? n2.succ() - n1 : 1
    });

    if((element.getValue().blank() || validRanges) &&
      (!pages || !maxPage || pages >= maxPage)) {
      element.removeClassName('field_with_errors');

      if(element.getValue().blank() && pages) {
        element.writeAttribute('data-range-pages', pages);
      } else if(!element.getValue().blank() && validRanges) {
        element.writeAttribute('data-range-pages', rangePages);
      }
    } else {
      element.addClassName('field_with_errors');
    }
  });

  document.on('change', '#print_printer', function(event, element) {
    var submit = $('print_submit');

    if($F(element).blank()) {
      submit.writeAttribute('value', submit.retrieve('original_value'));
    } else {
      if(!submit.retrieve('original_value')) {
        submit.store('original_value', submit.readAttribute('value'));
      }
      
      submit.writeAttribute('value', '<%= t(:'view.prints.print') %>');
    }
  });

  document.on('change', 'input[name$="[two_sided]"]', function(event, element) {
    var priceElement = element.up('.print_job').down(
      'input[name$="[price_per_copy]"]');

    if(element.checked) {
      priceElement.setValue(element.readAttribute('data-price-per-two-sided'));
    } else {
      priceElement.setValue(element.readAttribute('data-price-per-one-sided'));
    }
  });

  document.on('change', 'input[name$="[auto_document_name]"]', function(event, element) {
    var printJob = element.up('.print_job');

    if(printJob && element.getValue().blank()) {
      var pages = printJob.down('input[name$="[pages]"]');

      printJob.down('input[name$="[range]"]').writeAttribute('data-range-pages', 0);

      pages.setValue('');
      pages.enable();

      updatePrintJobPrice(printJob);
    }
  });

  document.on('change', 'input[name$="[auto_article_name]"]', function(event, element) {
    var articleLine = element.up('.article_line');

    if(articleLine && element.getValue().blank()) {
      articleLine.down('input[name$="[units]"]').setValue('0');
      articleLine.down('input[name$="[unit_price]"]').setValue('');

      updateArticleLinePrice(articleLine);
    }
  });

  document.on('change', 'input[name$="[pages]"]', function(event, element) {
    var printJob = element.up('.print_job');

    if(!element.readAttribute('disabled') && parseInt(element.getValue()) > 0) {
      var range = printJob.down('input[name$="[range]"]');

      range.writeAttribute('data-range-pages', parseInt(element.getValue()));

      range.disable();
      printJob.down('input[name$="[auto_document_name]"]').disable();
    } else {
      printJob.down('input[name$="[range]"]').enable();
      printJob.down('input[name$="[auto_document_name]"]').enable();
    }

    updatePrintJobPrice(printJob);
  });

  document.on('change', '.price_modifier', function(event, element) {
    if (element.up('.print_job')) {
      updatePrintJobPrice(element.up('.print_job'));
    } else if (element.up('.article_line')) {
      updateArticleLinePrice(element.up('.article_line'));
    }
  });

  // Captura de atajos de teclado
  document.on('keydown', function(e) {
    var key = e.keyCode || e.which;

    // CTRL + ALT + I = Agregar un trabajo
    if((key == 73 || key == 105) && e.ctrlKey && e.altKey) {
      $('add_print_job_link').click();
      Event.stop(e);
    // CTRL + ALT + A = Agregar un artículo
    } else if((key == 65 || key == 97) && e.ctrlKey && e.altKey) {
      $('add_article_line_link').click();
      Event.stop(e);
    // CTRL + ALT + P = Imprimir
    } else if((key == 80 || key == 112) && e.ctrlKey && e.altKey) {
      $('print_submit').click();
      Event.stop(e);
    }
  });
</script>